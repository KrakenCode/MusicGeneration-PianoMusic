#
# Code to create a midi file from the notes/chords list
#

from music21 import instrument, note, stream, chord
import numpy as np
from model import get_tokenized_notes

MAXLEN = 5

'''
Takes a list of music elements from the output of the model and converts them 
to rest, chord or note objects. Places the objects in a list and returns them 
to be converted to a midi file.
'''
def create_music_objects(model_output):
    song_offset = 0
    music_objects = []  # a list of music objects; rest, chord or note
    
    # split the output of the model on spaces and remove spaces
    music_list = model_output.split(' ')
    music_list = [a for a in music_list if a != '' and a != ' ']
    
    # create note and chord objects based on the values generated by the model
    for music_element in music_list:
        # music element is a rest
        if 'rest' in music_element:
            new_rest = note.Rest()
            new_rest.offset = song_offset
            music_objects.append(new_rest)
        # music element is a chord
        elif '|' in music_element:
            notes_in_chord = music_element.split('|')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(current_note)
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = song_offset
            music_objects.append(new_chord)
        # music element is a note
        else:
            new_note = note.Note(music_element)
            new_note.offset = song_offset
            new_note.storedInstrument = instrument.Piano()
            music_objects.append(new_note)

        # increase offset each iteration so that notes do not stack
        song_offset += 0.5
    
    return music_objects

'''
Write the list of music objects as a midi stream to the given file name.
'''
def write_to_file(music_objects, file_name):
    midi_stream = stream.Stream(music_objects)
    midi_stream.write('midi', fp=file_name)



'''

'''
def generate(primer_list, ctable, model):
    
    questions = get_tokenized_notes(primer_list)

    x = np.zeros((len(questions), MAXLEN, len(ctable.chars)), dtype=np.bool)
    for i, sentence in enumerate(questions):
        x[i] = ctable.encode(sentence, MAXLEN)
    preds = model.predict_classes(x)
    new_song = []   # TODO make sure tmp was the new song
    for xrow in preds:
        new_song.append(ctable.decode(xrow, calc_argmax=False))
    
    return new_song

'''

'''    
def generate_long(primer, length=5):
    
    primer_list = primer
    last = primer
    
    for i in range(length):
        last = generate([last])[0]
        primer_list += ' ' + last
    return primer_list  